@startuml

AppBundle\Manager.SourceManager --> AppBundle\Entity.Project
AppBundle\Manager.SourceManager --> AppBundle\Source.AbstractSource

namespace AppBundle\Manager {
    class SourceManager {
        + {static} fetchNewChanges(project : Project)
        + {static} fetchAllChanges(project : Project)
    }
}

namespace AppBundle\Entity\Source {
    abstract class AbstractSource {
        # id : string
        # options : array
        # settings : array
        # project : Project
        + getId() : string
        + getOptions() : array
        + getSettings() : array
        + getProject() : Project
        + setProject(project : Project)
        {abstract} + create([settings : array])
        {abstract} + getFirstChangeExternalId()
        {abstract} + getChangeDetails(changeLogId : int, version : string) : array
    }
    class Github extends AbstractSource {
        + changelogUrl : string = 'https://api.github.com/repos/{vendor}/{repository}/commits';
	    + tagsUrl : string = 'https://api.github.com/repos/{vendor}/{repository}/tags';
	    + changelogDetailsUrl : string = 'https://api.github.com/repos/{vendor}/{repository}/commits/{commitId}';

        + create([settings : array])
        + getFirstChangeExternalId() : string
        + getChangeDetails(changeLogId : int) : array
        - getFromURL(action : string[, options : array]) : Object
        - versions : array
        - getVersions() : array
    }
}

namespace AppBundle\Entity {
    abstract class AbstractEntity {
        # id : int
        # dateAdded : \DateTime
        + getId() : int
        + getDateAdded() : \DateTime
        + onPrePersistSetDateAdded()
    }
    class Asset extends AbstractEntity {
        - title : string
        + getTitle() : string
    }
    class Change extends AbstractEntity {
        - externalId : string {unique}
        - title : string
        - version : string
        - type : string
        - author : string
        + getTitle() : string
        + getVersion() : string
        + getType() : string
        + getAuthor() : string
        + getExternalId() : string
        + setTitle(title : string)
        + setVersion(version : string)
        + setType(type : string)
        + setAuthor(author : string)
        + setExternalId(externalId : string)
    }
    Change o-> "1" Change : parent
    class ChangeContent extends AbstractEntity {
    	- externalId : string
    	+ getExternalId() : string
    	+ setExternalId(externalId : string)
    	- filename : string
    	+ getFilename() : string
    	+ setFilename(filename : string)
    	- status : string
    	+ setStatus(status : string)
    	+ getStatus() : string
    	- additions : int
    	+ getAdditions() : int
    	+ setAdditions(additions : int)
    	- deletions : int
    	+ getDeletions() : int
    	+ setDeletions(deletions : int)
    	- changes : int
    	+ getChanges() : int
    	+ setChanges(changes : int)
    	- patch : string
    	+ setPatch(patch : string
    	+ getPatch() : string
    	+ getChange(getCssStatus) : string
    }

    ChangeContent "0..*" <--> "1" Change

    class Project extends AbstractEntity {
        - title : string
        - source : string
        - options : array
        - metadata : array
        + getTitle() : string
        + getSource() : string
        + setOptions(array : array)
        + getOptions() : array
        + getMetadata() : array
        + hasChanges() : bool
        + hasCompleteChanges() : bool
    }
    class User extends AbstractEntity implements \Symfony\Component\Security\Core\User.UserInterface {
        - username : string
        - email : string
        - password : string
        - roles : array
        + getUsername() : string
        + setUsername(username : string)
        + getEmail() : string
        + setEmail(email : string)
        + getPassword() : string
        + setPassword(password : string)
        + getRoles() : array
        + setRoles(roles : array)
        + getSalt() : null
        + eraseCredentials()
    }

    Change "1" <--> "0..*" Asset
    Project "1" <--> "0..*" Change
}


@enduml